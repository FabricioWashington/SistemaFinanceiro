package Sistema;

import DTO.Registro_Janeiro_2024DTO;
import dao.ConexaoDAO;
import java.sql.Connection;
import java.sql.SQLException;
import dao.Registro_Abril_2024DAO;
import dao.Registro_Agosto_2024DAO;
import dao.Registro_Dezembro_2024DAO;
import dao.Registro_Fevereiro_2024DAO;
import dao.Registro_Janeiro_2024DAO;
import dao.Registro_Julho_2024DAO;
import dao.Registro_Junho_2024DAO;
import dao.Registro_Maio_2024DAO;
import dao.Registro_Março_2024DAO;
import dao.Registro_Novembro_2024DAO;
import dao.Registro_Outubro_2024DAO;
import dao.Registro_Setembro_2024DAO;
import dao.RendaMensal_Abril_2024DAO;
import dao.RendaMensal_Agosto_2024DAO;
import dao.RendaMensal_Fevereiro_2024DAO;
import dao.RendaMensal_Janeiro_2024DAO;
import dao.RendaMensal_Julho_2024DAO;
import dao.RendaMensal_Junho_2024DAO;
import dao.RendaMensal_Maio_2024DAO;
import dao.RendaMensal_Março_2024DAO;
import dao.RendaMensal_Novembro_2024DAO;
import dao.RendaMensal_Outubro_2024DAO;
import dao.RendaMensal_Setembro_2024DAO;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import dao.RendaMensal_Dezembro_2024DAO;
import java.util.HashMap;
import java.util.List;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.swing.JRViewer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import net.sf.jasperreports.view.JasperViewer;

public class HomeView extends javax.swing.JFrame {

    public HomeView() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btnHome_Registro = new javax.swing.JButton();
        btnHome_RendaMensal = new javax.swing.JButton();
        btn_Home_TelaInicial = new javax.swing.JButton();
        Painel_TotalRenda = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtTotal_Renda = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        Painel_TotalSaidas = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtTotal_Saidas = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        Painel_TotalEntradas = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtTotal_Entradas = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Painel_TotalSobrou = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtTotal_Sobrou = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        btnPesquisar_Dashboard = new javax.swing.JButton();
        lblMes = new javax.swing.JLabel();
        btnLimparCampos = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnHome_Registro.setBackground(new java.awt.Color(51, 51, 51));
        btnHome_Registro.setForeground(new java.awt.Color(255, 255, 255));
        btnHome_Registro.setText("Registro");
        btnHome_Registro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHome_RegistroActionPerformed(evt);
            }
        });

        btnHome_RendaMensal.setBackground(new java.awt.Color(51, 51, 51));
        btnHome_RendaMensal.setForeground(new java.awt.Color(255, 255, 255));
        btnHome_RendaMensal.setText("Renda Mensal");
        btnHome_RendaMensal.setMaximumSize(new java.awt.Dimension(73, 23));
        btnHome_RendaMensal.setMinimumSize(new java.awt.Dimension(73, 23));
        btnHome_RendaMensal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHome_RendaMensalActionPerformed(evt);
            }
        });

        btn_Home_TelaInicial.setBackground(new java.awt.Color(255, 255, 255));
        btn_Home_TelaInicial.setForeground(new java.awt.Color(0, 0, 0));
        btn_Home_TelaInicial.setText("Home");
        btn_Home_TelaInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Home_TelaInicialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHome_Registro, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addComponent(btnHome_RendaMensal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addComponent(btn_Home_TelaInicial, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_Home_TelaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHome_Registro, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHome_RendaMensal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnHome_Registro.getAccessibleContext().setAccessibleDescription("");

        Painel_TotalRenda.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.lightGray, null, null));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("RENDA");

        txtTotal_Renda.setEditable(false);
        txtTotal_Renda.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        txtTotal_Renda.setText("0,00");
        txtTotal_Renda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotal_RendaActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel8.setText("R$");

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/money_8376158.png"))); // NOI18N

        javax.swing.GroupLayout Painel_TotalRendaLayout = new javax.swing.GroupLayout(Painel_TotalRenda);
        Painel_TotalRenda.setLayout(Painel_TotalRendaLayout);
        Painel_TotalRendaLayout.setHorizontalGroup(
            Painel_TotalRendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Painel_TotalRendaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Painel_TotalRendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Painel_TotalRendaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotal_Renda, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addGroup(Painel_TotalRendaLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(Painel_TotalRendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Painel_TotalRendaLayout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLabel13)
                    .addContainerGap(286, Short.MAX_VALUE)))
        );
        Painel_TotalRendaLayout.setVerticalGroup(
            Painel_TotalRendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Painel_TotalRendaLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(Painel_TotalRendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Painel_TotalRendaLayout.createSequentialGroup()
                        .addGroup(Painel_TotalRendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTotal_Renda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(56, 56, 56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Painel_TotalRendaLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(16, 16, 16))))
            .addGroup(Painel_TotalRendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Painel_TotalRendaLayout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(60, Short.MAX_VALUE)))
        );

        Painel_TotalSaidas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("SAÍDAS");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel10.setText("R$");

        txtTotal_Saidas.setEditable(false);
        txtTotal_Saidas.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        txtTotal_Saidas.setText("0,00");
        txtTotal_Saidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotal_SaidasActionPerformed(evt);
            }
        });

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/money_8376158.png"))); // NOI18N

        javax.swing.GroupLayout Painel_TotalSaidasLayout = new javax.swing.GroupLayout(Painel_TotalSaidas);
        Painel_TotalSaidas.setLayout(Painel_TotalSaidasLayout);
        Painel_TotalSaidasLayout.setHorizontalGroup(
            Painel_TotalSaidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Painel_TotalSaidasLayout.createSequentialGroup()
                .addGroup(Painel_TotalSaidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Painel_TotalSaidasLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel14)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotal_Saidas, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Painel_TotalSaidasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Painel_TotalSaidasLayout.setVerticalGroup(
            Painel_TotalSaidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Painel_TotalSaidasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Painel_TotalSaidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotal_Saidas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(43, 43, 43))
            .addGroup(Painel_TotalSaidasLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(19, 19, 19))
        );

        Painel_TotalEntradas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("ENTRADAS");

        txtTotal_Entradas.setEditable(false);
        txtTotal_Entradas.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        txtTotal_Entradas.setText("0,00");
        txtTotal_Entradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotal_EntradasActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel9.setText("R$");

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/money_8376158.png"))); // NOI18N

        javax.swing.GroupLayout Painel_TotalEntradasLayout = new javax.swing.GroupLayout(Painel_TotalEntradas);
        Painel_TotalEntradas.setLayout(Painel_TotalEntradasLayout);
        Painel_TotalEntradasLayout.setHorizontalGroup(
            Painel_TotalEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Painel_TotalEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Painel_TotalEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel5))
                .addGap(38, 38, 38)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotal_Entradas)
                .addGap(45, 45, 45))
        );
        Painel_TotalEntradasLayout.setVerticalGroup(
            Painel_TotalEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Painel_TotalEntradasLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(Painel_TotalEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Painel_TotalEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTotal_Entradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(21, 21, 21))
        );

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/diagram_2285545.png"))); // NOI18N
        jLabel1.setText("DASHBOARD");

        Painel_TotalSobrou.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setText("SOBROU");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel11.setText("R$");

        txtTotal_Sobrou.setEditable(false);
        txtTotal_Sobrou.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        txtTotal_Sobrou.setText("0,00");
        txtTotal_Sobrou.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotal_SobrouActionPerformed(evt);
            }
        });

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/money_8376158.png"))); // NOI18N

        javax.swing.GroupLayout Painel_TotalSobrouLayout = new javax.swing.GroupLayout(Painel_TotalSobrou);
        Painel_TotalSobrou.setLayout(Painel_TotalSobrouLayout);
        Painel_TotalSobrouLayout.setHorizontalGroup(
            Painel_TotalSobrouLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Painel_TotalSobrouLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotal_Sobrou, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
            .addGroup(Painel_TotalSobrouLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Painel_TotalSobrouLayout.setVerticalGroup(
            Painel_TotalSobrouLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Painel_TotalSobrouLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Painel_TotalSobrouLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotal_Sobrou, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(43, 43, 43))
            .addGroup(Painel_TotalSobrouLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addContainerGap())
        );

        btnPesquisar_Dashboard.setText("PESQUISAR");
        btnPesquisar_Dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisar_DashboardActionPerformed(evt);
            }
        });

        lblMes.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N

        btnLimparCampos.setText("LIMPAR CAMPOS");
        btnLimparCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparCamposActionPerformed(evt);
            }
        });

        jLabel2.setText("ATENÇÃO");

        jLabel3.setText("Limpe os campos");

        jLabel16.setText("antes de realizar uma nova pesquisa.");

        jButton2.setText("RELATORIO MÊS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(140, 140, 140)
                        .addComponent(lblMes, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(26, 26, 26))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jMonthChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jYearChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnPesquisar_Dashboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(btnLimparCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Painel_TotalEntradas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Painel_TotalSaidas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Painel_TotalRenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Painel_TotalSobrou, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(201, 201, 201))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPesquisar_Dashboard))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(lblMes, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(Painel_TotalRenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Painel_TotalEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Painel_TotalSaidas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimparCampos)))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Painel_TotalSobrou, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16)
                        .addGap(47, 47, 47)))
                .addGap(20, 20, 20))
        );

        setSize(new java.awt.Dimension(1041, 758));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnHome_RegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHome_RegistroActionPerformed
        // chamar tela de registro
        RegistroView objregistroview = new RegistroView();
        objregistroview.setVisible(true);

        dispose();


    }//GEN-LAST:event_btnHome_RegistroActionPerformed

    private void btnHome_RendaMensalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHome_RendaMensalActionPerformed
        // chamar tela de renda mensal
        RendaMensalView objrendamensalview = new RendaMensalView();
        objrendamensalview.setVisible(true);

        dispose();

    }//GEN-LAST:event_btnHome_RendaMensalActionPerformed

    private void btn_Home_TelaInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Home_TelaInicialActionPerformed
        // chamar tela inicial
        HomeView objhomeviewTelaInicial = new HomeView();
        objhomeviewTelaInicial.setVisible(true);

        dispose();
    }//GEN-LAST:event_btn_Home_TelaInicialActionPerformed

    private void txtTotal_RendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotal_RendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotal_RendaActionPerformed

    private void txtTotal_EntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotal_EntradasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotal_EntradasActionPerformed

    private void txtTotal_SaidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotal_SaidasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotal_SaidasActionPerformed

    private void txtTotal_SobrouActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotal_SobrouActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotal_SobrouActionPerformed

    private void btnPesquisar_DashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisar_DashboardActionPerformed
        // pesquisar dados de meses, nos txtTotal_Saiu, txt_Total_Renda e txt_Total_Entradas, dps fzr uma subtração de entrada e saida!
        pesquisarMes();
    }//GEN-LAST:event_btnPesquisar_DashboardActionPerformed

    private void btnLimparCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparCamposActionPerformed
        // limpar campos
        LimparCampos();
    }//GEN-LAST:event_btnLimparCamposActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Exibir Relatorios de todos os meses
        GerarRelatorio();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeView().setVisible(true);
            }
        });
    }

    private void atualizarValorJaneiro(BigDecimal valor, JTextField txtValor_Total_Entrou) {
        // Verifica se o valor é nulo
        if (valor == null) {
            txtValor_Total_Entrou.setText("Valor nulo");
            return;
        }

        // Formatar o valor para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String valorFormatado = df.format(valor);

        // Exibir o valor formatado no campo de texto
        txtValor_Total_Entrou.setText(valorFormatado);
    }

    private void atualizarValor(BigDecimal valor, JTextField txtValor_Total_Entrou) {
        // Verifica se o valor é nulo
        if (valor == null) {
            txtValor_Total_Entrou.setText("Valor nulo");
            return;
        }

        // Formatar o valor para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String valorFormatado = df.format(valor);

        // Exibir o valor formatado no campo de texto
        txtValor_Total_Entrou.setText(valorFormatado);
    }

    private void pesquisarMes() {
// Obter o mês selecionado no JMonthChooser
        int mesSelecionado = jMonthChooser1.getMonth() + 1; // O mês é base 0, então adicionamos 1

        switch (mesSelecionado) {
            case 1:
                ExibirCalculoTotalEntradasJaneiro();
                ExibirCalculoTotalSaidasJaneiro();
                calcularTotalSobrouJaneiro();
                lblMes.setText("JANEIRO");
                break;
            case 2:
                ExibirCalculoTotalEntradasFevereiro();
                ExibirCalculoTotalSaidasFevereiro();
                calcularTotalSobrouFevereiro();
                lblMes.setText("FEVEREIRO");
                break;
            case 3:
                ExibirCalculoTotalEntradasMarço();
                ExibirCalculoTotalSaidasMarço();
                calcularTotalSobrouMarço();
                lblMes.setText("MARÇO");
                break;
            case 4:
                ExibirCalculoTotalEntradasAbril();
                ExibirCalculoTotalSaidasAbril();
                calcularTotalSobrouAbril();
                lblMes.setText("ABRIL");
                break;
            case 5:
                ExibirCalculoTotalEntradasMaio();
                ExibirCalculoTotalSaidasMaio();
                calcularTotalSobrouMaio();
                lblMes.setText("MAIO");
                break;
            case 6:
                ExibirCalculoTotalEntradasJunho();
                ExibirCalculoTotalSaidasJunho();
                calcularTotalSobrouJunho();
                lblMes.setText("JUNHO");
                break;
            case 7:
                ExibirCalculoTotalEntradasJulho();
                ExibirCalculoTotalSaidasJulho();
                calcularTotalSobrouJulho();
                lblMes.setText("JULHO");
                break;
            case 8:
                ExibirCalculoTotalEntradasAgosto();
                ExibirCalculoTotalSaidasAgosto();
                calcularTotalSobrouAgosto();
                lblMes.setText("AGOSTO");
                break;
            case 9:
                ExibirCalculoTotalEntradasSetembro();
                ExibirCalculoTotalSaidasSetembro();
                calcularTotalSobrouSetembro();
                lblMes.setText("SETEMBRO");
                break;
            case 10:
                ExibirCalculoTotalEntradasOutubro();
                ExibirCalculoTotalSaidasOutubro();
                calcularTotalSobrouOutubro();
                lblMes.setText("OUTUBRO");
                break;
            case 11:
                ExibirCalculoTotalEntradasNovembro();
                ExibirCalculoTotalSaidasNovembro();
                calcularTotalSobrouNovembro();
                lblMes.setText("NOVEMBRO");
                break;
            case 12:
                ExibirCalculoTotalEntradasDezembro();
                ExibirCalculoTotalSaidasDezembro();
                calcularTotalSobrouDezembro();
                lblMes.setText("DEZEMBRO");
                break;
            default:
                JOptionPane.showMessageDialog(null, "Por favor, selecione um mês válido.");
        }
    }

    private void ExibirCalculoTotalEntradasJaneiro() {
        RendaMensal_Janeiro_2024DAO dao = new RendaMensal_Janeiro_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);

        // Converter o total para BigDecimal e exibir no campo de texto txtTotal_Renda
        BigDecimal totalDecimal = new BigDecimal(total.toString().replace(",", ""));
        txtTotal_Renda.setText(totalDecimal.setScale(2, RoundingMode.HALF_UP).toString());
    }

    private void ExibirCalculoTotalSaidasJaneiro() {
        Registro_Janeiro_2024DAO dao = new Registro_Janeiro_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
            return;
        }

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtTotal_Saidas
        txtTotal_Saidas.setText(totalFormatado);
    }

    private void calcularTotalSobrouJaneiro() {
        try {
            // Calcular o total de entradas
            RendaMensal_Janeiro_2024DAO daoEntradas = new RendaMensal_Janeiro_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Janeiro_2024DAO daoSaidas = new Registro_Janeiro_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void ExibirCalculoTotalEntradasFevereiro() {
        RendaMensal_Fevereiro_2024DAO dao = new RendaMensal_Fevereiro_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);
        txtTotal_Renda.setText(totalFormatado);
    }

    private void ExibirCalculoTotalSaidasFevereiro() {
        Registro_Fevereiro_2024DAO dao = new Registro_Fevereiro_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Saiu
        txtTotal_Saidas.setText(totalFormatado);
    }

    private void calcularTotalSobrouFevereiro() {
        try {
            // Calcular o total de entradas
            RendaMensal_Fevereiro_2024DAO daoEntradas = new RendaMensal_Fevereiro_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Fevereiro_2024DAO daoSaidas = new Registro_Fevereiro_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void ExibirCalculoTotalEntradasMarço() {
        RendaMensal_Março_2024DAO dao = new RendaMensal_Março_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);
        txtTotal_Renda.setText(totalFormatado);
    }

    private void ExibirCalculoTotalSaidasMarço() {
        Registro_Março_2024DAO dao = new Registro_Março_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Saiu
        txtTotal_Saidas.setText(totalFormatado);
    }

    private void calcularTotalSobrouMarço() {
        try {
            // Calcular o total de entradas
            RendaMensal_Março_2024DAO daoEntradas = new RendaMensal_Março_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Março_2024DAO daoSaidas = new Registro_Março_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void ExibirCalculoTotalEntradasAbril() {
        RendaMensal_Abril_2024DAO dao = new RendaMensal_Abril_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);
        txtTotal_Renda.setText(totalFormatado);
    }

    private void ExibirCalculoTotalSaidasAbril() {
        Registro_Abril_2024DAO dao = new Registro_Abril_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Saiu
        txtTotal_Saidas.setText(totalFormatado);
    }

    private void calcularTotalSobrouAbril() {
        try {
            // Calcular o total de entradas
            RendaMensal_Abril_2024DAO daoEntradas = new RendaMensal_Abril_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Abril_2024DAO daoSaidas = new Registro_Abril_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void ExibirCalculoTotalEntradasMaio() {
        RendaMensal_Maio_2024DAO dao = new RendaMensal_Maio_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);
        txtTotal_Renda.setText(totalFormatado);
    }

    private void ExibirCalculoTotalSaidasMaio() {
        Registro_Maio_2024DAO dao = new Registro_Maio_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Saiu
        txtTotal_Saidas.setText(totalFormatado);
    }

    private void calcularTotalSobrouMaio() {
        try {
            // Calcular o total de entradas
            RendaMensal_Maio_2024DAO daoEntradas = new RendaMensal_Maio_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Maio_2024DAO daoSaidas = new Registro_Maio_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void ExibirCalculoTotalEntradasJunho() {
        RendaMensal_Junho_2024DAO dao = new RendaMensal_Junho_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);
        txtTotal_Renda.setText(totalFormatado);
    }

    private void ExibirCalculoTotalSaidasJunho() {
        Registro_Junho_2024DAO dao = new Registro_Junho_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Saiu
        txtTotal_Saidas.setText(totalFormatado);
    }

    private void calcularTotalSobrouJunho() {
        try {
            // Calcular o total de entradas
            RendaMensal_Junho_2024DAO daoEntradas = new RendaMensal_Junho_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Junho_2024DAO daoSaidas = new Registro_Junho_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void ExibirCalculoTotalEntradasJulho() {
        RendaMensal_Julho_2024DAO dao = new RendaMensal_Julho_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);
        txtTotal_Renda.setText(totalFormatado);
    }

    private void ExibirCalculoTotalSaidasJulho() {
        Registro_Julho_2024DAO dao = new Registro_Julho_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Saiu
        txtTotal_Saidas.setText(totalFormatado);
    }

    private void calcularTotalSobrouJulho() {
        try {
            // Calcular o total de entradas
            RendaMensal_Julho_2024DAO daoEntradas = new RendaMensal_Julho_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Julho_2024DAO daoSaidas = new Registro_Julho_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void ExibirCalculoTotalEntradasAgosto() {
        RendaMensal_Agosto_2024DAO dao = new RendaMensal_Agosto_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);
        txtTotal_Renda.setText(totalFormatado);
    }

    private void ExibirCalculoTotalSaidasAgosto() {
        Registro_Agosto_2024DAO dao = new Registro_Agosto_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Saiu
        txtTotal_Saidas.setText(totalFormatado);
    }

    private void calcularTotalSobrouAgosto() {
        try {
            // Calcular o total de entradas
            RendaMensal_Agosto_2024DAO daoEntradas = new RendaMensal_Agosto_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Agosto_2024DAO daoSaidas = new Registro_Agosto_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void ExibirCalculoTotalEntradasSetembro() {
        RendaMensal_Setembro_2024DAO dao = new RendaMensal_Setembro_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);
        txtTotal_Renda.setText(totalFormatado);
    }

    private void ExibirCalculoTotalSaidasSetembro() {
        Registro_Setembro_2024DAO dao = new Registro_Setembro_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Saiu
        txtTotal_Saidas.setText(totalFormatado);
    }

    private void calcularTotalSobrouSetembro() {
        try {
            // Calcular o total de entradas
            RendaMensal_Setembro_2024DAO daoEntradas = new RendaMensal_Setembro_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Setembro_2024DAO daoSaidas = new Registro_Setembro_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void ExibirCalculoTotalEntradasOutubro() {
        RendaMensal_Outubro_2024DAO dao = new RendaMensal_Outubro_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);
        txtTotal_Renda.setText(totalFormatado);
    }

    private void ExibirCalculoTotalSaidasOutubro() {
        Registro_Outubro_2024DAO dao = new Registro_Outubro_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Saiu
        txtTotal_Saidas.setText(totalFormatado);
    }

    private void calcularTotalSobrouOutubro() {
        try {
            // Calcular o total de entradas
            RendaMensal_Outubro_2024DAO daoEntradas = new RendaMensal_Outubro_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Outubro_2024DAO daoSaidas = new Registro_Outubro_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void ExibirCalculoTotalEntradasNovembro() {
        RendaMensal_Novembro_2024DAO dao = new RendaMensal_Novembro_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);
        txtTotal_Renda.setText(totalFormatado);
    }

    private void ExibirCalculoTotalSaidasNovembro() {
        Registro_Novembro_2024DAO dao = new Registro_Novembro_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Saiu
        txtTotal_Saidas.setText(totalFormatado);
    }

    private void calcularTotalSobrouNovembro() {
        try {
            // Calcular o total de entradas
            RendaMensal_Novembro_2024DAO daoEntradas = new RendaMensal_Novembro_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Novembro_2024DAO daoSaidas = new Registro_Novembro_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void ExibirCalculoTotalEntradasDezembro() {
        RendaMensal_Dezembro_2024DAO dao = new RendaMensal_Dezembro_2024DAO();
        BigDecimal total = dao.calcularTotalEntradas();

        // Verifica se o total é nulo
        if (total == null) {
            JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
            return;
        }

        // Formatar o total para exibir com duas casas decimais e separador de milhares
        DecimalFormat df = new DecimalFormat("###,###,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Entrou
        txtTotal_Entradas.setText(totalFormatado);
        txtTotal_Renda.setText(totalFormatado);
    }

    private void ExibirCalculoTotalSaidasDezembro() {
        Registro_Dezembro_2024DAO dao = new Registro_Dezembro_2024DAO();
        BigDecimal total = dao.calcularTotalSaidas();

        // Formatar o total para exibir no formato desejado
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String totalFormatado = df.format(total);

        // Exibir o total no campo de texto txtValor_Total_Saiu
        txtTotal_Saidas.setText(totalFormatado);

    }

    private void calcularTotalSobrouDezembro() {
        try {
            // Calcular o total de entradas
            RendaMensal_Novembro_2024DAO daoEntradas = new RendaMensal_Novembro_2024DAO();
            BigDecimal totalEntradas = daoEntradas.calcularTotalEntradas();

            // Calcular o total de saídas
            Registro_Novembro_2024DAO daoSaidas = new Registro_Novembro_2024DAO();
            BigDecimal totalSaidas = daoSaidas.calcularTotalSaidas();

            // Verifica se os totais são nulos
            if (totalEntradas == null) {
                JOptionPane.showMessageDialog(null, "O total de entradas é nulo.");
                return;
            }
            if (totalSaidas == null) {
                JOptionPane.showMessageDialog(null, "O total de saídas é nulo.");
                return;
            }

            // Calcular o total restante (entradas - saídas)
            BigDecimal totalSobrou = totalEntradas.subtract(totalSaidas);

            // Formatar o total restante para exibir com vírgula separando os milhares
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String totalSobrouFormatado = df.format(totalSobrou);

            // Exibir o total restante no campo de texto txtTotal_Sobrou
            txtTotal_Sobrou.setText(totalSobrouFormatado);
        } catch (NumberFormatException e) {
            // Caso ocorra um erro ao converter os valores para BigDecimal
            JOptionPane.showMessageDialog(null, "Erro ao calcular o total restante.");
        }
    }

    private void LimparCampos() {

        txtTotal_Renda.setText("0,00");
        txtTotal_Entradas.setText("0,00");
        txtTotal_Sobrou.setText("0,00");
        txtTotal_Saidas.setText("0,00");

    }

    private void GerarRelatorio() {
        // Obter o mês selecionado no JMonthChooser
        int mesSelecionado = jMonthChooser1.getMonth() + 1; // O mês é base 0, então adicionamos 1

        switch (mesSelecionado) {
            case 1:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes.jrxml");
                break;
            case 2:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes2.jrxml");

                break;
            case 3:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes3.jrxml");

                break;
            case 4:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes4.jrxml");

                break;
            case 5:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes5.jrxml");

                break;
            case 6:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes6.jrxml");

                break;
            case 7:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes7.jrxml");

                break;
            case 8:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes8.jrxml");

                break;
            case 9:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes9.jrxml");

                break;
            case 10:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes10.jrxml");

                break;
            case 11:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes11.jrxml");

                break;
            case 12:
                mostrarRelatorioJaneiro("src/Relatorios/RelatorioMes12.jrxml");

                break;
            default:
                JOptionPane.showMessageDialog(null, "Por favor, selecione um mês válido.");
        }
    }

    private void mostrarRelatorioJaneiro(String Caminho_Relatorio) {
        Connection conn = null;
        try {
            System.out.println("Iniciando geração do relatório");

            // Obter conexão com o banco de dados
            ConexaoDAO conexaoDAO = new ConexaoDAO();
            conn = conexaoDAO.conectaBD();

            // Compila o relatório
            JasperReport relatorioCompilado = JasperCompileManager.compileReport(Caminho_Relatorio);
            System.out.println("Relatório compilado com sucesso");

            // Preenche o relatório com os dados
            JasperPrint relatorioPreenchido = JasperFillManager.fillReport(relatorioCompilado, null, conn);
            System.out.println("Relatório preenchido com os dados");

            // Cria uma tela para exibir o relatório
            JDialog tela = new JDialog(this, "Relatório Mensal", true);
            tela.setSize(1000, 500);
            tela.setLocationRelativeTo(null);

            // Adiciona o visualizador de relatórios à tela
            JRViewer painelRelatorio = new JRViewer(relatorioPreenchido);
            tela.getContentPane().add(painelRelatorio);

            // Exibe a tela com o relatório
            tela.setVisible(true);

            System.out.println("Relatório exibido com sucesso");

        } catch (JRException ex) {
            Logger.getLogger(HomeView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Erro ao gerar o Relatório: " + ex.getMessage());
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Painel_TotalEntradas;
    private javax.swing.JPanel Painel_TotalRenda;
    private javax.swing.JPanel Painel_TotalSaidas;
    private javax.swing.JPanel Painel_TotalSobrou;
    private javax.swing.JButton btnHome_Registro;
    private javax.swing.JButton btnHome_RendaMensal;
    private javax.swing.JButton btnLimparCampos;
    private javax.swing.JButton btnPesquisar_Dashboard;
    private javax.swing.JButton btn_Home_TelaInicial;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private javax.swing.JPanel jPanel2;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private javax.swing.JLabel lblMes;
    public javax.swing.JTextField txtTotal_Entradas;
    public javax.swing.JTextField txtTotal_Renda;
    public javax.swing.JTextField txtTotal_Saidas;
    public javax.swing.JTextField txtTotal_Sobrou;
    // End of variables declaration//GEN-END:variables
}
